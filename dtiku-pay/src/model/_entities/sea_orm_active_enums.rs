//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.8

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};
use strum::{EnumMessage, EnumProperty};

#[derive(
    Debug,
    Clone,
    Copy,
    PartialEq,
    Eq,
    EnumIter,
    DeriveActiveEnum,
    Serialize,
    Deserialize,
    strum :: EnumString,
    strum :: Display,
    strum :: EnumProperty,
)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "order_status")]
#[serde(rename_all = "snake_case")]
#[strum(serialize_all = "snake_case")]
pub enum OrderStatus {
    #[sea_orm(string_value = "created")]
    #[strum(props(text = "已创建"))]
    Created,
    #[sea_orm(string_value = "paid")]
    #[strum(props(text = "已付款"))]
    Paid,
    #[sea_orm(string_value = "canceled")]
    #[strum(props(text = "已取消"))]
    Canceled,
    #[sea_orm(string_value = "refunded")]
    #[strum(props(text = "已退款"))]
    Refunded,
}

impl OrderStatus {
    /// SUCCESS--支付成功
    /// REFUND--转入退款
    /// NOTPAY--未支付
    /// CLOSED--已关闭
    /// REVOKED--已撤销(刷卡支付)
    /// USERPAYING--用户支付中
    /// PAYERROR--支付失败(其他原因，如银行返回失败)
    /// ACCEPT--已接收，等待扣款(委托代扣)
    /// 支付状态机请见下单API页面
    pub fn from_wechat(trade_state: &str) -> Self {
        match trade_state.to_ascii_uppercase().as_str() {
            // 支付成功
            "SUCCESS" => OrderStatus::Paid,
            // 转入退款
            "REFUND" => OrderStatus::Refunded,
            // 未支付
            "NOTPAY" => OrderStatus::Canceled,
            // 已关闭
            "CLOSED" => OrderStatus::Canceled,
            // 已撤销（刷卡支付）
            "REVOKED" => OrderStatus::Canceled,
            // 支付失败
            "PAYERROR" => OrderStatus::Canceled,
            // 未知状态 → 默认给 Created
            _ => OrderStatus::Created,
        }
    }

    /// https://opendocs.alipay.com/support/01raw9
    /// ● WAIT_BUYER_PAY：交易创建，等待买家付款。
    /// ● TRADE_CLOSED：在指定时间段内未支付时关闭的交易或在交易完成全额退款成功时关闭的交易。
    /// ● TRADE_SUCCESS：商家签约的产品支持退款功能的前提下，买家付款成功。
    /// ● TRADE_FINISHED：商家签约的产品不支持退款功能的前提下，买家付款成功。
    /// 或者，商家签约的产品支持退款功能的前提下，交易已经成功并且已经超过可退款期限。
    pub fn from_alipay(trade_state: &str) -> Self {
        match trade_state.to_ascii_uppercase().as_str() {
            // 支付成功
            "TRADE_SUCCESS" | "TRADE_FINISHED" => OrderStatus::Paid,
            // 未支付
            "TRADE_CLOSED" => OrderStatus::Canceled,
            // 用户支付中
            "WAIT_BUYER_PAY" => OrderStatus::Created,
            // 未知状态 → 默认给 Created
            _ => OrderStatus::Created,
        }
    }
}

#[derive(
    Debug,
    Clone,
    Copy,
    PartialEq,
    Eq,
    EnumIter,
    DeriveActiveEnum,
    Serialize,
    Deserialize,
    strum :: EnumString,
    strum :: Display,
    strum :: EnumProperty,
)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "order_level")]
#[serde(rename_all = "snake_case")]
#[strum(serialize_all = "snake_case")]
pub enum OrderLevel {
    #[sea_orm(string_value = "monthly")]
    #[strum(props(text = "月度"))]
    Monthly,
    #[sea_orm(string_value = "quarterly")]
    #[strum(props(text = "季度"))]
    Quarterly,
    #[sea_orm(string_value = "half_year")]
    #[strum(props(text = "半年"))]
    HalfYear,
    #[sea_orm(string_value = "annual")]
    #[strum(props(text = "一年"))]
    Annual,
}

impl OrderLevel {
    pub fn days(&self) -> i32 {
        match self {
            Self::Monthly => 30,
            Self::Quarterly => 90,
            Self::HalfYear => 180,
            Self::Annual => 360,
        }
    }
    pub fn discount_rate(&self) -> f32 {
        match self {
            Self::Monthly => 1.0,
            Self::Quarterly => 0.968,
            Self::HalfYear => 0.917,
            Self::Annual => 0.835,
        }
    }
    pub fn title(&self) -> &'static str {
        self.get_str("text").unwrap_or_default()
    }

    /// 单位为分:
    /// 30天10块钱
    /// 90天30块钱
    /// 180天60块钱
    /// 360天120块钱
    #[inline]
    pub fn original_amount(&self) -> i32 {
        return self.days() / 30 * 1000;
    }

    #[inline]
    pub fn original_amount_text(&self) -> String {
        return format!("{}元", self.original_amount() / 100);
    }

    /// 单位为分
    /// 30天10块钱 = 不打折
    /// 90天30块钱 = 3000 * 0.968 = 2904分
    /// 180天60块钱 = 6000 * 0.917 = 5502分
    /// 360天120块钱 = 12000 * 0.835 = 10020分
    #[inline]
    pub fn discount(&self) -> i32 {
        return ((self.original_amount() as f32) * self.discount_rate()) as i32;
    }

    /// 单位为分(抹了零头)
    /// 30天10块钱 = 不打折
    /// 90天30块钱 = 3000 * 0.968 = 2900分 = 29块
    /// 180天60块钱 = 6000 * 0.917 = 5500分 = 55块
    /// 360天120块钱 = 12000 * 0.835 = 10000分 = 100块
    #[inline]
    pub fn amount(&self) -> i32 {
        return self.discount() / 100 * 100;
    }

    #[inline]
    pub fn amount_text(&self) -> String {
        return format!("{}元", self.discount() / 100);
    }
}

#[derive(
    Debug,
    Clone,
    Copy,
    PartialEq,
    Eq,
    EnumIter,
    DeriveActiveEnum,
    Serialize,
    Deserialize,
    strum :: EnumString,
    strum :: Display,
    strum :: EnumMessage,
)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "pay_from")]
#[serde(rename_all = "snake_case")]
#[strum(serialize_all = "snake_case")]
pub enum PayFrom {
    #[sea_orm(string_value = "alipay")]
    #[strum(message = "支付宝")]
    Alipay,
    #[sea_orm(string_value = "wechat")]
    #[strum(message = "微信")]
    Wechat,
}

impl PayFrom {
    pub fn title(&self) -> &'static str {
        self.get_message().unwrap_or_default()
    }
}
