//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.8

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};
use strum::{EnumMessage, EnumProperty};

#[derive(
    Debug,
    Clone,
    PartialEq,
    Eq,
    EnumIter,
    DeriveActiveEnum,
    Serialize,
    Deserialize,
    strum :: EnumString,
    strum :: Display,
    strum :: EnumProperty,
)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "order_level")]
#[serde(rename_all = "snake_case")]
#[strum(serialize_all = "snake_case")]
pub enum OrderLevel {
    #[sea_orm(string_value = "monthly")]
    #[strum(props(text = "月度"))]
    Monthly,
    #[sea_orm(string_value = "quarterly")]
    #[strum(props(text = "季度"))]
    Quarterly,
    #[sea_orm(string_value = "half_year")]
    #[strum(props(text = "半年"))]
    HalfYear,
    #[sea_orm(string_value = "annual")]
    #[strum(props(text = "一年"))]
    Annual,
}

impl OrderLevel {
    pub fn days(&self) -> i64 {
        match self {
            Self::Monthly => 30,
            Self::Quarterly => 90,
            Self::HalfYear => 180,
            Self::Annual => 360,
        }
    }
    pub fn discount_rate(&self) -> f64 {
        match self {
            Self::Monthly => 1.0,
            Self::Quarterly => 0.968,
            Self::HalfYear => 0.917,
            Self::Annual => 0.835,
        }
    }
    pub fn title(&self) -> &'static str {
        self.get_str("text").unwrap_or_default()
    }

    #[inline]
    pub fn original_amount(&self) -> i64 {
        return self.days() / 30 * 1000;
    }

    #[inline]
    pub fn original_amount_text(&self) -> String {
        return format!("{}元", self.original_amount() / 100);
    }

    #[inline]
    pub fn discount(&self) -> i64 {
        return ((self.original_amount() as f64) * self.discount_rate()) as i64;
    }

    #[inline]
    pub fn amount(&self) -> i64 {
        return self.discount() / 100 * 100;
    }

    #[inline]
    pub fn amount_text(&self) -> String {
        return format!("{}元", self.discount() / 100);
    }
}

#[derive(
    Debug,
    Clone,
    PartialEq,
    Eq,
    EnumIter,
    DeriveActiveEnum,
    Serialize,
    Deserialize,
    strum :: EnumString,
    strum :: Display,
    strum :: EnumMessage,
)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "pay_from")]
#[serde(rename_all = "snake_case")]
#[strum(serialize_all = "snake_case")]
pub enum PayFrom {
    #[sea_orm(string_value = "alipay")]
    #[strum(message = "支付宝")]
    Alipay,
    #[sea_orm(string_value = "wechat")]
    #[strum(message = "微信")]
    Wechat
}

impl PayFrom {
    pub fn title(&self) -> &'static str {
        self.get_message().unwrap_or_default()
    }
}
