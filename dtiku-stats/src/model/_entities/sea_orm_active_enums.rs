//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.13

use regex::{Regex, RegexBuilder};
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};
use strum::EnumProperty;

#[derive(
    Debug,
    Clone,
    Copy,
    PartialEq,
    Eq,
    DeriveActiveEnum,
    Serialize,
    Deserialize,
    strum :: EnumString,
    strum :: Display,
    strum :: EnumIter,
    strum :: AsRefStr,
    strum :: EnumMessage,
    strum :: EnumProperty,
)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "idiom_type")]
#[serde(rename_all = "snake_case")]
#[strum(serialize_all = "snake_case")]
pub enum IdiomType {
    #[sea_orm(string_value = "idiom")]
    #[strum(props(
        text = "成语",
        regex = "(?<![\\u4e00-\\u9fa5])([\\u4e00-\\u9fa5]{4})(?![\\u4e00-\\u9fa5])"
    ))]
    Idiom,
    #[sea_orm(string_value = "word")]
    #[strum(props(
        text = "词语",
        regex = "(?<![\\u4e00-\\u9fa5])([\\u4e00-\\u9fa5]{2})(?![\\u4e00-\\u9fa5])"
    ))]
    Word,
}

impl IdiomType {
    pub fn is_idiom(&self) -> bool {
        match self {
            Self::Idiom => true,
            Self::Word => false,
        }
    }

    pub fn text(&self) -> &'static str {
        self.get_str("text").unwrap_or_default()
    }

    pub fn regex(&self) -> Regex {
        let regex = self.get_str("regex").unwrap_or_default();

        RegexBuilder::new(regex).multi_line(true).build().unwrap()
    }
}
